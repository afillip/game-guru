export class ContextConsumer {
    constructor() {
        this.context = {};
        this.renderer = () => null;
    }
    connectedCallback() {
        if (this.subscribe != null) {
            this.unsubscribe = this.subscribe(this.el, 'context');
        }
    }
    disconnectedCallback() {
        if (this.unsubscribe != null) {
            this.unsubscribe();
        }
    }
    render() {
        return this.renderer(Object.assign({}, this.context));
    }
    static get is() { return "context-consumer"; }
    static get properties() { return {
        "context": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{ [key: string]: any }",
                "resolved": "{ [key: string]: any; }",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "{}"
        },
        "renderer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Function",
                "resolved": "Function",
                "references": {
                    "Function": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "() => null"
        },
        "subscribe": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "SubscribeCallback<any>",
                "resolved": "(el: any, props: PropList<any>) => () => void",
                "references": {
                    "SubscribeCallback": {
                        "location": "import",
                        "path": "../declarations"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "unsubscribe": {}
    }; }
    static get elementRef() { return "el"; }
}
